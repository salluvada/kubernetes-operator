apiVersion: v1
kind: ConfigMap
metadata:
  name: ldap-configuration-groovy
data:
  1-integrate-ldap.groovy: | 
    import hudson.model.*;
    import jenkins.model.*;
    import hudson.security.*;
    import jenkins.security.plugins.ldap.*;
    import hudson.util.Secret;
    import com.cloudbees.plugins.credentials.SystemCredentialsProvider;
    import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl;
    import com.cloudbees.plugins.credentials.CredentialsScope;

    println "--> Configuring LDAP"
    def instance = Jenkins.getInstance()

    def ldap_server = "ldap.corp.stateauto.com:389"
    def ldap_rootDN = "OU=User Objects,DC=corp,DC=stateauto;DC=com"
    def ldap_userSearchBase = ""
    def ldap_userSearch = "sAMAccountName={0}"
    def ldap_groupSearchBase = ""
    def ldap_groupSearchFilter = "(&(objectclass=group)(cn={0}))"
    def ldap_groupMembershipFilter = "(&(objectCategory=group)(member:1.2.840.113556.1.4.1941:={0}))"
    def ldap_managerDN = "KUM3028@sai"
    def ldap_managerPassword = "Sapotsystems@88"
    def ldap_inhibitInferRootDN = false
    def ldap_disableMailAddressResolver = false
    def ldap_cache = null //LDAPSecurityRealm.CacheConfiguration(200,1800)
    def ldap_displayNameAttributeName = "displayName"
    def ldap_mailAddressAttributeName = "mail"

    def ldapRealm = new LDAPSecurityRealm(
        ldap_server, //String server
        ldap_rootDN, //String rootDN
        ldap_userSearchBase, //String userSearchBase
        ldap_userSearch, //String userSearch
        ldap_groupSearchBase, //String groupSearchBase
        ldap_groupSearchFilter, //String groupSearchFilter
        new FromGroupSearchLDAPGroupMembershipStrategy(ldap_groupMembershipFilter), //LDAPGroupMembershipStrategy groupMembershipStrategy
        ldap_managerDN, //String managerDN
        Secret.fromString(ldap_managerPassword), //Secret managerPasswordSecret
        ldap_inhibitInferRootDN, //boolean inhibitInferRootDN
        ldap_disableMailAddressResolver, //boolean disableMailAddressResolver
        ldap_cache, //CacheConfiguration cache
        null, //EnvironmentProperty[] environmentProperties
        ldap_displayNameAttributeName, //String displayNameAttributeName
        ldap_mailAddressAttributeName, //String mailAddressAttributeName
        IdStrategy.CASE_INSENSITIVE, //IdStrategy userIdStrategy
        IdStrategy.CASE_INSENSITIVE //IdStrategy groupIdStrategy >> defaults
    )

    instance.setSecurityRealm(ldapRealm)

    // If no authorisation strategy is in place, default to "Authenticated users can do anything"
    def authStrategy = Hudson.instance.getAuthorizationStrategy()

    if (authStrategy instanceof AuthorizationStrategy.Unsecured) {
      println "Defaulting to 'Authenticated users can do anything' rather than 'unsecure'."
      instance.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy())
    }

    // Save the state
    instance.save()