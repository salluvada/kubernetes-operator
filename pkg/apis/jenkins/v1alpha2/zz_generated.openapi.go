// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha2

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/jenkins/v1alpha2.Jenkins":       schema_pkg_apis_jenkins_v1alpha2_Jenkins(ref),
		"./pkg/apis/jenkins/v1alpha2.JenkinsSpec":   schema_pkg_apis_jenkins_v1alpha2_JenkinsSpec(ref),
		"./pkg/apis/jenkins/v1alpha2.JenkinsStatus": schema_pkg_apis_jenkins_v1alpha2_JenkinsStatus(ref),
	}
}

func schema_pkg_apis_jenkins_v1alpha2_Jenkins(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Jenkins is the Schema for the jenkins API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the desired state of the Jenkins",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.JenkinsSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status defines the observed state of Jenkins",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.JenkinsStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/jenkins/v1alpha2.JenkinsSpec", "./pkg/apis/jenkins/v1alpha2.JenkinsStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkins_v1alpha2_JenkinsSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JenkinsSpec defines the desired state of the Jenkins",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "Master represents Jenkins master pod properties and Jenkins plugins. Every single change here requires a pod restart.",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.JenkinsMaster"),
						},
					},
					"seedJobs": {
						SchemaProps: spec.SchemaProps{
							Description: "SeedJobs defines list of Jenkins Seed Job configurations More info: https://github.com/jenkinsci/kubernetes-operator/blob/master/docs/getting-started.md#configure-seed-jobs-and-pipelines",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/jenkins/v1alpha2.SeedJob"),
									},
								},
							},
						},
					},
					"notifications": {
						SchemaProps: spec.SchemaProps{
							Description: "Notifications defines list of a services which are used to inform about Jenkins status Can be used to integrate chat services like Slack, Microsoft Teams or Mailgun",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/jenkins/v1alpha2.Notification"),
									},
								},
							},
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service is Kubernetes service of Jenkins master HTTP pod Defaults to : port: 8080 type: ClusterIP",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.Service"),
						},
					},
					"slaveService": {
						SchemaProps: spec.SchemaProps{
							Description: "Service is Kubernetes service of Jenkins slave pods Defaults to : port: 50000 type: ClusterIP",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.Service"),
						},
					},
					"backup": {
						SchemaProps: spec.SchemaProps{
							Description: "Backup defines configuration of Jenkins backup More info: https://github.com/jenkinsci/kubernetes-operator/blob/master/docs/getting-started.md#configure-backup-and-restore",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.Backup"),
						},
					},
					"restore": {
						SchemaProps: spec.SchemaProps{
							Description: "Backup defines configuration of Jenkins backup restore More info: https://github.com/jenkinsci/kubernetes-operator/blob/master/docs/getting-started.md#configure-backup-and-restore",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.Restore"),
						},
					},
					"groovyScripts": {
						SchemaProps: spec.SchemaProps{
							Description: "GroovyScripts defines configuration of Jenkins customization via groovy scripts",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.GroovyScripts"),
						},
					},
					"configurationAsCode": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigurationAsCode defines configuration of Jenkins customization via Configuration as Code Jenkins plugin",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.ConfigurationAsCode"),
						},
					},
					"roles": {
						SchemaProps: spec.SchemaProps{
							Description: "Roles defines list of extra RBAC roles for the Jenkins Master pod service account",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/rbac/v1.RoleRef"),
									},
								},
							},
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccount defines Jenkins master service account attributes",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.ServiceAccount"),
						},
					},
					"jenkinsAPISettings": {
						SchemaProps: spec.SchemaProps{
							Description: "JenkinsAPISettings defines configuration used by the operator to gain admin access to the Jenkins API",
							Ref:         ref("./pkg/apis/jenkins/v1alpha2.JenkinsAPISettings"),
						},
					},
				},
				Required: []string{"jenkinsAPISettings"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/jenkins/v1alpha2.Backup", "./pkg/apis/jenkins/v1alpha2.ConfigurationAsCode", "./pkg/apis/jenkins/v1alpha2.GroovyScripts", "./pkg/apis/jenkins/v1alpha2.JenkinsAPISettings", "./pkg/apis/jenkins/v1alpha2.JenkinsMaster", "./pkg/apis/jenkins/v1alpha2.Notification", "./pkg/apis/jenkins/v1alpha2.Restore", "./pkg/apis/jenkins/v1alpha2.SeedJob", "./pkg/apis/jenkins/v1alpha2.Service", "./pkg/apis/jenkins/v1alpha2.ServiceAccount", "k8s.io/api/rbac/v1.RoleRef"},
	}
}

func schema_pkg_apis_jenkins_v1alpha2_JenkinsStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JenkinsStatus defines the observed state of Jenkins",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"operatorVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "OperatorVersion is the operator version which manages this CR",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"provisionStartTime": {
						SchemaProps: spec.SchemaProps{
							Description: "ProvisionStartTime is a time when Jenkins master pod has been created",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"baseConfigurationCompletedTime": {
						SchemaProps: spec.SchemaProps{
							Description: "BaseConfigurationCompletedTime is a time when Jenkins base configuration phase has been completed",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"userConfigurationCompletedTime": {
						SchemaProps: spec.SchemaProps{
							Description: "UserConfigurationCompletedTime is a time when Jenkins user configuration phase has been completed",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"restoredBackup": {
						SchemaProps: spec.SchemaProps{
							Description: "RestoredBackup is the restored backup number after Jenkins master pod restart",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"lastBackup": {
						SchemaProps: spec.SchemaProps{
							Description: "LastBackup is the latest backup number",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"pendingBackup": {
						SchemaProps: spec.SchemaProps{
							Description: "PendingBackup is the pending backup number",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"backupDoneBeforePodDeletion": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupDoneBeforePodDeletion tells if backup before pod deletion has been made",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"userAndPasswordHash": {
						SchemaProps: spec.SchemaProps{
							Description: "UserAndPasswordHash is a SHA256 hash made from user and password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"createdSeedJobs": {
						SchemaProps: spec.SchemaProps{
							Description: "CreatedSeedJobs contains list of seed job id already created in Jenkins",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"appliedGroovyScripts": {
						SchemaProps: spec.SchemaProps{
							Description: "AppliedGroovyScripts is a list with all applied groovy scripts in Jenkins by the operator",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/jenkins/v1alpha2.AppliedGroovyScript"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/jenkins/v1alpha2.AppliedGroovyScript", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
